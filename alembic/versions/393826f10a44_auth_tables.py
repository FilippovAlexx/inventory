"""auth tables

Revision ID: 393826f10a44
Revises: 2025_09_02_0001
Create Date: 2025-09-03 14:17:41.196166

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "393826f10a44"
down_revision = "2025_09_02_0001"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'user_account',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('email', sa.String(length=255), nullable=False),
        sa.Column('full_name', sa.String(length=255), nullable=True),
        sa.Column('hashed_password', sa.String(length=255), nullable=False),
        sa.Column(
            "role",
            sa.Enum("admin", "operator", "viewer", name="user_role", create_type=False),
            nullable=False,
            server_default="operator",
        ),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column(
            'created_at',
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            nullable=False
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_account_email'), 'user_account', ['email'], unique=True)
    op.alter_column(
        'inventory_item', 'updated_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text('now()')
    )
    op.drop_index(op.f('ix_inventory_item_product_location'), table_name='inventory_item')
    op.drop_constraint(op.f('uq_inventory_item_product_location'), 'inventory_item', type_='unique')
    op.alter_column(
        'inventory_txn', 'created_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text('now()')
    )
    op.drop_constraint(
        op.f('inventory_txn_from_location_id_fkey'),
        'inventory_txn',
        type_='foreignkey'
    )
    op.drop_constraint(
        op.f('inventory_txn_to_location_id_fkey'),
        'inventory_txn',
        type_='foreignkey'
    )
    op.drop_constraint(op.f('inventory_txn_product_id_fkey'), 'inventory_txn', type_='foreignkey')
    op.create_foreign_key(None, 'inventory_txn', 'product', ['product_id'], ['id'])
    op.create_foreign_key(None, 'inventory_txn', 'location', ['from_location_id'], ['id'])
    op.create_foreign_key(None, 'inventory_txn', 'location', ['to_location_id'], ['id'])
    op.alter_column(
        'location', 'created_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text('now()')
    )
    op.alter_column(
        'location', 'updated_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text('now()')
    )
    op.alter_column(
        'product', 'created_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text('now()')
    )
    op.alter_column(
        'product', 'updated_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text('now()')
    )
    op.drop_constraint(
        op.f('purchase_order_supplier_id_fkey'),
        'purchase_order',
        type_='foreignkey'
    )
    op.create_foreign_key(None, 'purchase_order', 'supplier', ['supplier_id'], ['id'])
    op.drop_column('purchase_order', 'created_at')
    op.drop_constraint(op.f('uq_pol_po_product'), 'purchase_order_line', type_='unique')
    op.drop_constraint(
        op.f('purchase_order_line_product_id_fkey'),
        'purchase_order_line',
        type_='foreignkey'
    )
    op.create_foreign_key(None, 'purchase_order_line', 'product', ['product_id'], ['id'])
    op.alter_column(
        'supplier', 'created_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text('now()')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        'supplier', 'created_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text('now()')
    )
    op.drop_constraint(None, 'purchase_order_line', type_='foreignkey')
    op.create_foreign_key(
        op.f('purchase_order_line_product_id_fkey'),
        'purchase_order_line',
        'product',
        ['product_id'],
        ['id'],
        ondelete='RESTRICT'
    )
    op.create_unique_constraint(
        op.f('uq_pol_po_product'),
        'purchase_order_line',
        ['purchase_order_id', 'product_id'],
        postgresql_nulls_not_distinct=False
    )
    op.add_column(
        'purchase_order',
        sa.Column(
            'created_at',
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            autoincrement=False,
            nullable=True
        )
    )
    op.drop_constraint(None, 'purchase_order', type_='foreignkey')
    op.create_foreign_key(
        op.f('purchase_order_supplier_id_fkey'),
        'purchase_order',
        'supplier',
        ['supplier_id'],
        ['id'],
        ondelete='RESTRICT'
    )
    op.alter_column(
        'product', 'updated_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text('now()')
    )
    op.alter_column(
        'product', 'created_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text('now()')
    )
    op.alter_column(
        'location', 'updated_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text('now()')
    )
    op.alter_column(
        'location', 'created_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text('now()')
    )
    op.drop_constraint(None, 'inventory_txn', type_='foreignkey')
    op.drop_constraint(None, 'inventory_txn', type_='foreignkey')
    op.drop_constraint(None, 'inventory_txn', type_='foreignkey')
    op.create_foreign_key(
        op.f('inventory_txn_product_id_fkey'),
        'inventory_txn',
        'product',
        ['product_id'],
        ['id'],
        ondelete='RESTRICT'
    )
    op.create_foreign_key(
        op.f('inventory_txn_to_location_id_fkey'),
        'inventory_txn',
        'location',
        ['to_location_id'],
        ['id'],
        ondelete='SET NULL'
    )
    op.create_foreign_key(
        op.f('inventory_txn_from_location_id_fkey'),
        'inventory_txn',
        'location',
        ['from_location_id'],
        ['id'],
        ondelete='SET NULL'
    )
    op.alter_column(
        'inventory_txn', 'created_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text('now()')
    )
    op.create_unique_constraint(
        op.f('uq_inventory_item_product_location'),
        'inventory_item',
        ['product_id', 'location_id'],
        postgresql_nulls_not_distinct=False
    )
    op.create_index(
        op.f('ix_inventory_item_product_location'),
        'inventory_item',
        ['product_id', 'location_id'],
        unique=False
    )
    op.alter_column(
        'inventory_item', 'updated_at',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text('now()')
    )
    op.drop_index(op.f('ix_user_account_email'), table_name='user_account')
    op.drop_table('user_account')
    # ### end Alembic commands ###
